import streamlit as st
import pandas as pd
import random
import time
import io
import os
import json
import base64
from datetime import datetime

#############################################
# Пути к файлам для постоянного хранения данных
#############################################
USERS_FILE = "users_store.json"
TESTS_FILE = "tests_store.json"

#############################################
# Функции для работы с постоянным хранилищем
#############################################

def load_users():
    """Загружает пользователей из файла. Если файл отсутствует, создаёт дефолтного администратора."""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        users = [{"username": "admin", "password": "admin", "role": "admin"}]
        save_users(users)
        return users

def save_users(users):
    """Сохраняет список пользователей в файл."""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

def load_tests():
    """Загружает тесты из файла. Если файл отсутствует, создаёт пустой список."""
    if os.path.exists(TESTS_FILE):
        with open(TESTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        tests = []
        save_tests(tests)
        return tests

def save_tests(tests):
    """Сохраняет список тестов в файл. Тест хранится как словарь с ключами 'name' и 'data' (base64)."""
    with open(TESTS_FILE, "w", encoding="utf-8") as f:
        json.dump(tests, f, ensure_ascii=False, indent=4)

#############################################
# Инициализация состояния session_state
#############################################

def init_session_state():
    if "users" not in st.session_state:
        st.session_state.users = load_users()
    if "tests" not in st.session_state:
        st.session_state.tests = load_tests()
    if "current_user" not in st.session_state:
        st.session_state.current_user = None
    # Возможные значения: "login", "admin", "quiz_home", "quiz", "result"
    if "current_page" not in st.session_state:
        params = st.query_params
        st.session_state.current_page = params.get("page", ["login"])[0]
    if "quiz_state" not in st.session_state:
        st.session_state.quiz_state = {}
    if "results" not in st.session_state:
        st.session_state.results = []  # Список результатов тестов

#############################################
# Функция обновления query-параметров
#############################################

def update_query_params():
    if hasattr(st, "set_query_params"):
        st.set_query_params(page=st.session_state.current_page)

#############################################
# Функция безопасного перезапуска
#############################################

def safe_rerun():
    update_query_params()
    try:
        st.experimental_rerun()
    except Exception:
        pass

#############################################
# Кастомные стили (современный дизайн)
#############################################

def set_custom_styles():
    custom_css = """
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #2f2f3f;
            color: #eee;
            margin: 0;
            padding: 0;
        }
        .stButton button {
            background: linear-gradient(45deg, #4a90e2, #50e3c2);
            border: none;
            color: white;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 6px;
            cursor: pointer;
        }
        .stButton button:hover {
            filter: brightness(90%);
        }
        .stTextInput>div>div>input {
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 8px;
        }
        .stFileUploader label {
            font-weight: 500;
        }
        .page-title {
            text-align: center;
            margin-top: 20px;
            color: #fff;
        }
        .section-header {
            margin-top: 30px;
            border-bottom: 2px solid #4a90e2;
            padding-bottom: 5px;
            color: #4a90e2;
        }
        .result-box {
            border: 2px solid #4a90e2;
            border-radius: 8px;
            padding: 20px;
            background-color: #3a3a4a;
        }
        /* Кнопка вверху слева */
        .top-left-button {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 9999;
        }
    </style>
    """
    st.markdown(custom_css, unsafe_allow_html=True)

#############################################
# Страница входа (Login Page)
#############################################

def login_page():
    st.markdown("<h1 class='page-title'>Tizimga Kirish</h1>", unsafe_allow_html=True)
    st.markdown("Iltimos, login va parolni kiriting:")
    username = st.text_input("Login", key="login_username")
    password = st.text_input("Parol", type="password", key="login_password")
    if st.button("Kirish", key="login_btn"):
        for user in st.session_state.users:
            if user["username"] == username and user["password"] == password:
                st.session_state.current_user = user
                if user["role"] == "admin":
                    st.session_state.current_page = "admin"
                else:
                    st.session_state.current_page = "quiz_home"
                safe_rerun()
                return
        st.error("Login yoki parol noto'g'ri!")

#############################################
# Админ-панель (для администратора)
#############################################

def admin_panel():
    st.markdown("<h1 class='page-title'>Admin Paneli</h1>", unsafe_allow_html=True)
    st.markdown("**Login:** admin  |  **Parol:** admin")

    # Раздел загрузки Excel-тестов
    st.markdown("<h2 class='section-header'>Excel formatidagi testlarni qo'shish</h2>", unsafe_allow_html=True)
    uploaded_files = st.file_uploader("Excel fayllarni tanlang", type=["xlsx"], accept_multiple_files=True, key="admin_uploader")
    if uploaded_files:
        for file in uploaded_files:
            file_bytes = file.read()
            encoded = base64.b64encode(file_bytes).decode('utf-8')
            test_entry = {"name": file.name, "data": encoded}
            st.session_state.tests.append(test_entry)
            st.success(f"{file.name} muvaffaqiyatli yuklandi.")
        save_tests(st.session_state.tests)
        safe_rerun()

    # Список тестов
    st.markdown("<h2 class='section-header'>Yuklangan testlar</h2>", unsafe_allow_html=True)
    if not st.session_state.tests:
        st.info("Hozircha test mavjud emas.")
    else:
        search_term = st.text_input("Testlarni qidirish", key="test_search")
        for idx, test in enumerate(st.session_state.tests):
            if not search_term or search_term.lower() in test["name"].lower():
                col1, col2 = st.columns([3, 1])
                col1.markdown(f"**{test['name']}**")
                if col2.button("O'chir", key=f"delete_test_{idx}"):
                    st.session_state.tests.pop(idx)
                    save_tests(st.session_state.tests)
                    safe_rerun()

    # Список пользователей с возможностью удаления
    st.markdown("<h2 class='section-header'>Foydalanuvchilar ro'yxati</h2>", unsafe_allow_html=True)
    if not st.session_state.users:
        st.info("Foydalanuvchilar mavjud emas.")
    else:
        for i, user in enumerate(st.session_state.users):
            col1, col2 = st.columns([3, 1])
            col1.write(f"{user['username']} (Rol: {user['role']})")
            if col2.button("O'chir", key=f"user_del_{i}"):
                st.session_state.users.pop(i)
                save_users(st.session_state.users)
                safe_rerun()

    # Добавление нового пользователя (с выбором роли)
    st.markdown("<h2 class='section-header'>Yangi foydalanuvchi qo'shish</h2>", unsafe_allow_html=True)
    new_username = st.text_input("Yangi login", key="new_user_login")
    new_password = st.text_input("Yangi parol", type="password", key="new_user_pass")
    new_role = st.selectbox("Rolni tanlang", ["admin", "user"], key="new_user_role")
    if st.button("Foydalanuvchi qo'shish", key="add_user_btn"):
        if new_username == "" or new_password == "":
            st.error("Iltimos, barcha maydonlarni to'ldiring!")
        elif any(u["username"] == new_username for u in st.session_state.users):
            st.error("Bu login allaqachon mavjud!")
        else:
            new_user = {"username": new_username, "password": new_password, "role": new_role}
            st.session_state.users.append(new_user)
            save_users(st.session_state.users)
            st.success("Yangi foydalanuvchi muvaffaqiyatli qo'shildi!")
            st.session_state.pop("new_user_login", None)
            st.session_state.pop("new_user_pass", None)
            st.session_state.pop("new_user_role", None)
            safe_rerun()

    # Кнопка «Chiqish» из админ-панели
    if st.button("Chiqish", key="admin_exit"):
        st.session_state.current_user = None
        st.session_state.current_page = "login"
        safe_rerun()

#############################################
# Главная страница викторины
#############################################

def quiz_home_page():
    st.markdown("<h1 class='page-title'>Interaktiv Viktorina</h1>", unsafe_allow_html=True)
    st.markdown("<h2 class='section-header'>Rejim va Test tanlash</h2>", unsafe_allow_html=True)

    if st.session_state.quiz_state.get("started", False):
        st.info("Test allaqachon boshlangan. Iltimos, davom eting.")
        return

    mode = st.radio("Rejimni tanlang", ("Imtihon", "Mashq"), key="mode_select")
    is_exam_mode = (mode == "Imtihon")

    if is_exam_mode:
        st.info("Imtihon rejimida: 25 daqiqa taymer ishlaydi.")

    if not st.session_state.tests:
        st.warning("Hozircha test mavjud emas. Iltimos, admin bilan bog'laning.")
        return

    test_names = [test["name"] for test in st.session_state.tests]
    selected_test = st.selectbox("Testni tanlang", test_names, key="test_select")

    if st.button("Testni boshlash", key="start_test"):
        test = next((t for t in st.session_state.tests if t["name"] == selected_test), None)
        if test is None:
            st.error("Test topilmadi!")
            return
        questions = read_test(test["data"])
        if len(questions) == 0:
            st.error("Testda savollar topilmadi!")
            return
        if is_exam_mode and len(questions) > 25:
            questions = random.sample(questions, 25)
        else:
            random.shuffle(questions)

        st.session_state.quiz_state = {
            "questions": questions,
            "current_index": 0,
            "user_answers": [None] * len(questions),
            "start_time": time.time(),
            "is_exam_mode": is_exam_mode,
            "started": True
        }
        st.session_state.current_page = "quiz"
        safe_rerun()

#############################################
# Функция чтения теста из Excel (base64)
#############################################

def read_test(file_data_base64):
    file_bytes = base64.b64decode(file_data_base64)
    df = pd.read_excel(io.BytesIO(file_bytes), header=None)
    questions = []
    for index, row in df.iterrows():
        if index == 0:
            continue
        question_text = row[0]
        options = list(row[1:5])
        if pd.isna(question_text) or all(pd.isna(opt) for opt in options):
            continue
        correct_answer = options[0]
        random.shuffle(options)
        questions.append({
            "question": question_text,
            "options": options,
            "correct": correct_answer
        })
    return questions

#############################################
# Страница прохождения теста
#############################################

def quiz_page():
    quiz_state = st.session_state.quiz_state
    if not quiz_state.get("started", False):
        st.error("Test hali boshlanmagan. Iltimos, bosh sahifaga qayting.")
        return

    questions = quiz_state["questions"]
    current_index = quiz_state["current_index"]
    question = questions[current_index]

    st.markdown(f"<h2 class='section-header'>Savol {current_index + 1} / {len(questions)}</h2>", unsafe_allow_html=True)
    st.write(question["question"])

    current_answer = quiz_state["user_answers"][current_index]
    try:
        default_index = question["options"].index(current_answer) if current_answer in question["options"] else 0
    except Exception:
        default_index = 0

    answer = st.radio("Javobni tanlang", question["options"], index=default_index, key=f"answer_radio_{current_index}")
    st.session_state.quiz_state["user_answers"][current_index] = answer

    if not quiz_state["is_exam_mode"]:
        if answer == question["correct"]:
            st.success("To'g'ri!")
        else:
            st.error(f"Noto'g'ri! (To'g'ri javob: {question['correct']})")

    if quiz_state["is_exam_mode"]:
        elapsed = time.time() - quiz_state["start_time"]
        remaining = 1500 - int(elapsed)
        if remaining <= 0:
            st.warning("Vaqt tugadi!")
            finish_quiz()
            return
        minutes = remaining // 60
        seconds = remaining % 60
        st.info(f"Taymer: {minutes:02d}:{seconds:02d}")

    col1, col2, col3 = st.columns(3)
    if col1.button("Oldingi", key="prev_question") and current_index > 0:
        st.session_state.quiz_state["current_index"] -= 1
        safe_rerun()

    if col2.button("Keyingi", key="next_question") and current_index < len(questions) - 1:
        st.session_state.quiz_state["current_index"] += 1
        safe_rerun()

    if col3.button("Yakunla", key="finish_quiz"):
        finish_quiz()

#############################################
# Завершение теста и вывод результатов
#############################################

def finish_quiz():
    quiz_state = st.session_state.quiz_state
    questions = quiz_state["questions"]
    correct = sum(1 for q, a in zip(questions, quiz_state["user_answers"]) if a == q["correct"])
    elapsed = time.time() - quiz_state["start_time"]
    minutes = int(elapsed // 60)
    seconds = int(elapsed % 60)
    result_data = {
        "username": st.session_state.current_user["username"],
        "score": correct,
        "total": len(questions),
        "time": f"{minutes} daqiqa {seconds} soniya",
        "mode": "Imtihon" if quiz_state["is_exam_mode"] else "Mashq",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    st.session_state.results.append(result_data)
    st.session_state.current_page = "result"
    st.session_state.quiz_state = {}
    safe_rerun()

#############################################
# Страница с результатами теста
#############################################

def result_page():
    st.markdown("<h1 class='page-title'>Test Yakunlandi</h1>", unsafe_allow_html=True)
    if st.session_state.results:
        last_result = st.session_state.results[-1]
        with st.container():
            st.markdown("<div class='result-box'>", unsafe_allow_html=True)
            st.write(f"**Foydalanuvchi:** {last_result['username']}")
            st.write(f"**Rejim:** {last_result['mode']}")
            st.write(f"**To'g'ri javoblar:** {last_result['score']} / {last_result['total']}")
            st.write(f"**Test yechish vaqti:** {last_result['time']}")
            st.write(f"**Sana va vaqt:** {last_result['timestamp']}")
            st.markdown("</div>", unsafe_allow_html=True)
    if st.button("Bosh sahifaga o'tish", key="result_home"):
        st.session_state.current_page = "quiz_home"
        safe_rerun()

#############################################
# Верхняя панель с кнопкой «Chiqish»
#############################################

def top_left_logout():
    st.markdown("<div class='top-left-button'>", unsafe_allow_html=True)
    if st.button("Chiqish", key="top_left_exit"):
        st.session_state.current_user = None
        st.session_state.current_page = "login"
        safe_rerun()
    st.markdown("</div>", unsafe_allow_html=True)

#############################################
# Основная функция приложения
#############################################

def main():
    init_session_state()
    set_custom_styles()

    # Кнопка «Chiqish» в верхнем левом углу (всегда видна)
    top_left_logout()

    if st.session_state.current_user is None:
        st.session_state.current_page = "login"

    if st.session_state.current_page == "login":
        login_page()
    elif st.session_state.current_page == "admin":
        admin_panel()
    elif st.session_state.current_page == "quiz_home":
        quiz_home_page()
    elif st.session_state.current_page == "quiz":
        quiz_page()
    elif st.session_state.current_page == "result":
        result_page()
    else:
        st.error("Noma'lum sahifa!")

if __name__ == "__main__":
    main()
